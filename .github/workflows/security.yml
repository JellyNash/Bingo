name: Security Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency vulnerability scanning
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate || true

      - name: Run npm audit for detailed report
        run: |
          pnpm -r exec npm audit --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json

  # Container vulnerability scanning with Trivy
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, realtime]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t bingo-${{ matrix.service }}:test \
            -f backend/${{ matrix.service }}/Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bingo-${{ matrix.service }}:test'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # Static Application Security Testing (SAST)
  sast-codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security linting
  security-lint:
    name: Security Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint with security plugin
        run: pnpm -r lint:security || true

      - name: Check for hardcoded secrets in code
        run: |
          # Check for potential secrets
          ! grep -r "JWT_SECRET\|SECRET_KEY\|PASSWORD\|API_KEY" --include="*.ts" --include="*.js" \
            --exclude-dir=node_modules --exclude-dir=dist . | grep -v "process.env"

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'bingo-platform'
          path: '.'
          format: 'HTML,SARIF'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/dependency-check-report.sarif

  # Dynamic Application Security Testing (DAST) - Basic
  dast-basic:
    name: DAST Basic Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: bingo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Start application
        run: |
          docker compose -f docker-compose.yml up -d --build
          sleep 30  # Wait for services to be ready

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-scan-report
          path: zap_report.html

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Start Caddy server
        run: |
          docker run -d --name caddy-test \
            -v $PWD/infra/caddy:/etc/caddy \
            -p 8080:80 \
            caddy:alpine
          sleep 5

      - name: Check security headers
        run: |
          # Check for required security headers
          curl -I http://localhost:8080 | tee headers.txt

          echo "Checking security headers..."
          grep -q "X-Frame-Options" headers.txt || exit 1
          grep -q "X-Content-Type-Options" headers.txt || exit 1
          grep -q "Content-Security-Policy" headers.txt || exit 1
          grep -q "Referrer-Policy" headers.txt || exit 1
          echo "All security headers present!"

      - name: Cleanup
        if: always()
        run: docker stop caddy-test && docker rm caddy-test

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Check licenses
        run: |
          pnpm add -g license-checker
          license-checker --summary --excludePrivatePackages > license-report.txt

          # Check for problematic licenses
          ! grep -E "GPL|AGPL|LGPL|SSPL" license-report.txt

      - name: Upload license report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-report
          path: license-report.txt

  # Security test summary
  security-summary:
    name: Security Test Summary
    runs-on: ubuntu-latest
    needs:
      - dependency-audit
      - container-scan
      - sast-codeql
      - secret-scan
      - security-lint
      - owasp-dependency-check
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Security Test Summary"
          echo "===================="
          echo "Dependency Audit: ${{ needs.dependency-audit.result }}"
          echo "Container Scan: ${{ needs.container-scan.result }}"
          echo "SAST CodeQL: ${{ needs.sast-codeql.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Security Lint: ${{ needs.security-lint.result }}"
          echo "OWASP Dependency Check: ${{ needs.owasp-dependency-check.result }}"

          # Fail if any critical test failed
          if [ "${{ needs.container-scan.result }}" = "failure" ] || \
             [ "${{ needs.secret-scan.result }}" = "failure" ] || \
             [ "${{ needs.sast-codeql.result }}" = "failure" ]; then
            echo "Critical security tests failed!"
            exit 1
          fi
