/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/games": {
    /** Create a game */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateGameRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CreateGameResponse"];
          };
        };
      };
    };
  };
  "/games/{id}/open": {
    /** Open game for play */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Game opened */
        200: {
          content: {
            "application/json": components["schemas"]["Game"];
          };
        };
      };
    };
  };
  "/join": {
    /** Join a game by PIN */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["JoinRequest"];
        };
      };
      responses: {
        /** @description Joined successfully */
        201: {
          content: {
            "application/json": components["schemas"]["JoinResponse"];
          };
        };
      };
    };
  };
  "/resume": {
    /** Resume a prior session */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ResumeRequest"];
        };
      };
      responses: {
        /** @description Resume payload */
        200: {
          content: {
            "application/json": components["schemas"]["ResumeResponse"];
          };
        };
      };
    };
  };
  "/games/{id}/draw": {
    /** Draw the next number manually */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Drawn number */
        200: {
          content: {
            "application/json": components["schemas"]["Draw"];
          };
        };
      };
    };
  };
  "/games/{id}/auto-draw": {
    /** Enable or disable auto draw */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AutoDrawRequest"];
        };
      };
      responses: {
        /** @description Updated game configuration */
        200: {
          content: {
            "application/json": components["schemas"]["Game"];
          };
        };
      };
    };
  };
  "/games/{id}/pause": {
    /** Pause an active game */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Game paused */
        200: {
          content: {
            "application/json": components["schemas"]["Game"];
          };
        };
      };
    };
  };
  "/games/{id}/undo": {
    /** Undo the last draw (not implemented in MVP) */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Not implemented */
        501: {
          content: never;
        };
      };
    };
  };
  "/cards/{cardId}/mark": {
    /** Mark or unmark a number on a card */
    post: {
      parameters: {
        path: {
          cardId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MarkRequest"];
        };
      };
      responses: {
        /** @description Mark updated */
        200: {
          content: {
            "application/json": components["schemas"]["MarkResponse"];
          };
        };
      };
    };
  };
  "/cards/{cardId}/claim": {
    /** Claim Bingo for a card */
    post: {
      parameters: {
        path: {
          cardId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClaimRequest"];
        };
      };
      responses: {
        /** @description Claim processed */
        200: {
          content: {
            "application/json": components["schemas"]["ClaimResponse"];
          };
        };
      };
    };
  };
  "/games/{id}/penalty": {
    /** Apply a penalty to a player */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PenaltyRequest"];
        };
      };
      responses: {
        /** @description Penalty applied */
        201: {
          content: {
            "application/json": components["schemas"]["Penalty"];
          };
        };
      };
    };
  };
  "/games/{id}/snapshot": {
    /** Fetch the full game snapshot */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Game snapshot */
        200: {
          content: {
            "application/json": components["schemas"]["GameSnapshot"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    GameStatus: "LOBBY" | "OPEN" | "ACTIVE" | "PAUSED" | "COMPLETED" | "CANCELLED";
    /** @enum {string} */
    PlayerStatus: "ACTIVE" | "COOLDOWN" | "DISQUALIFIED" | "LEFT";
    /** @enum {string} */
    BingoPattern: "ROW_1" | "ROW_2" | "ROW_3" | "ROW_4" | "ROW_5" | "COL_1" | "COL_2" | "COL_3" | "COL_4" | "COL_5" | "DIAGONAL_1" | "DIAGONAL_2" | "FOUR_CORNERS";
    Game: {
      /** @description Game identifier (CUID) */
      id: string;
      /** @description Six digit public PIN used by players to join */
      pin: string;
      name?: string | null;
      status: components["schemas"]["GameStatus"];
      maxPlayers: number;
      allowLateJoin: boolean;
      /** @description Interval in seconds when auto draw enabled */
      autoDrawInterval: number;
      autoDrawEnabled: boolean;
      winnerLimit: number;
      currentSequence: number;
      /** Format: date-time */
      lastDrawAt?: string | null;
      /** Format: date-time */
      startedAt?: string | null;
      /** Format: date-time */
      completedAt?: string | null;
      /** Format: date-time */
      pausedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
      createdBy?: string | null;
    };
    Player: {
      id: string;
      gameId: string;
      nickname: string;
      status: components["schemas"]["PlayerStatus"];
      strikes: number;
      isDisqualified: boolean;
      /** Format: date-time */
      cooldownUntil?: string | null;
      /** Format: date-time */
      joinedAt: string;
      /** Format: date-time */
      lastSeenAt: string;
    };
    BingoCard: {
      id: string;
      playerId: string;
      numbers: ((number | "FREE")[])[];
      cardSignature: string;
      marks: {
        [key: string]: boolean;
      };
      /** Format: date-time */
      generatedAt: string;
    };
    Draw: {
      id: string;
      gameId: string;
      sequence: number;
      /** @enum {string} */
      letter: "B" | "I" | "N" | "G" | "O";
      number: number;
      /** Format: date-time */
      drawnAt: string;
      drawnBy?: string | null;
      drawSignature?: string | null;
    };
    Claim: {
      id: string;
      gameId: string;
      playerId: string;
      pattern: components["schemas"]["BingoPattern"];
      isValid?: boolean | null;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      status: "PENDING" | "ACCEPTED" | "DENIED" | "SUPERSEDED";
      /** Format: date-time */
      validatedAt?: string | null;
      validatedBy?: string | null;
      denialReason?: string | null;
      isWinner: boolean;
      winPosition?: number | null;
    };
    Penalty: {
      id: string;
      gameId: string;
      playerId: string;
      type: string;
      reason: string;
      severity: number;
      /** Format: date-time */
      appliedAt: string;
      /** Format: date-time */
      expiresAt?: string | null;
      isActive: boolean;
    };
    GameSnapshot: {
      game: components["schemas"]["Game"];
      draws: components["schemas"]["Draw"][];
      players: components["schemas"]["Player"][];
      recentClaims: components["schemas"]["Claim"][];
      winners: {
          player: components["schemas"]["Player"];
          claim: components["schemas"]["Claim"];
        }[];
    };
    CreateGameRequest: {
      name?: string;
      maxPlayers?: number;
      allowLateJoin?: boolean;
      autoDrawInterval?: number;
      winnerLimit?: number;
    };
    CreateGameResponse: components["schemas"]["Game"];
    JoinRequest: {
      pin: string;
      nickname: string;
      idempotencyKey?: string;
    };
    JoinResponse: {
      player: components["schemas"]["Player"];
      bingoCard: components["schemas"]["BingoCard"];
      sessionToken: string;
      resumeToken: string;
      gameState: components["schemas"]["GameSnapshot"];
    };
    ResumeRequest: {
      resumeToken: string;
    };
    ResumeResponse: {
      player: components["schemas"]["Player"];
      gameState: components["schemas"]["GameSnapshot"];
      missedEvents: Record<string, never>[];
      newSessionToken: string;
      drawnNumbers: {
          seq: number;
          num: number;
        }[];
      winners?: {
          playerId: string;
          nickname: string;
          rank: number;
          pattern: components["schemas"]["BingoPattern"];
        }[];
      gameStatus: components["schemas"]["GameStatus"];
    };
    AutoDrawRequest: {
      enabled: boolean;
      intervalMs?: number;
    };
    MarkRequest: {
      /** @description Cell identifier (FREE or letter+number) */
      position: string;
      marked: boolean;
      idempotencyKey?: string;
    };
    MarkResponse: {
      success: boolean;
      marks?: {
        [key: string]: boolean;
      };
      eligiblePatterns?: components["schemas"]["BingoPattern"][];
    };
    ClaimRequest: {
      pattern: components["schemas"]["BingoPattern"];
      idempotencyKey?: string;
    };
    ClaimResponse: {
      claim: components["schemas"]["Claim"];
      message?: string;
      strikes?: number;
      cooldownMs?: number;
    };
    PenaltyRequest: {
      playerId: string;
      type: string;
      reason: string;
      severity?: number;
      durationMinutes?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
