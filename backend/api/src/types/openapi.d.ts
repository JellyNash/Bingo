/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a game */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateGameRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateGameResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Open game for play */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Game opened */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Game"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join a game by PIN */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["JoinRequest"];
                };
            };
            responses: {
                /** @description Joined successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JoinResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a prior session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ResumeRequest"];
                };
            };
            responses: {
                /** @description Resume payload */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ResumeResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/draw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Draw the next number manually */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Drawn number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Draw"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/auto-draw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable or disable auto draw */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AutoDrawRequest"];
                };
            };
            responses: {
                /** @description Updated game configuration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Game"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause an active game */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Game paused */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Game"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undo the last draw (not implemented in MVP) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Not implemented */
                501: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardId}/mark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark or unmark a number on a card */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MarkRequest"];
                };
            };
            responses: {
                /** @description Mark updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardId}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Claim Bingo for a card */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClaimRequest"];
                };
            };
            responses: {
                /** @description Claim processed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaimResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/penalty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply a penalty to a player */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PenaltyRequest"];
                };
            };
            responses: {
                /** @description Penalty applied */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Penalty"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch the full game snapshot */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Game snapshot */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameSnapshot"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        GameStatus: "LOBBY" | "OPEN" | "ACTIVE" | "PAUSED" | "COMPLETED" | "CANCELLED";
        /** @enum {string} */
        PlayerStatus: "ACTIVE" | "COOLDOWN" | "DISQUALIFIED" | "LEFT";
        /** @enum {string} */
        BingoPattern: "ROW_1" | "ROW_2" | "ROW_3" | "ROW_4" | "ROW_5" | "COL_1" | "COL_2" | "COL_3" | "COL_4" | "COL_5" | "DIAGONAL_1" | "DIAGONAL_2" | "FOUR_CORNERS";
        Game: {
            /** @description Game identifier (CUID) */
            id: string;
            /** @description Six digit public PIN used by players to join */
            pin: string;
            name?: string | null;
            status: components["schemas"]["GameStatus"];
            maxPlayers: number;
            allowLateJoin: boolean;
            /** @description Interval in seconds when auto draw enabled */
            autoDrawInterval: number;
            autoDrawEnabled: boolean;
            winnerLimit: number;
            currentSequence: number;
            /** Format: date-time */
            lastDrawAt?: string | null;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            completedAt?: string | null;
            /** Format: date-time */
            pausedAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string | null;
        };
        Player: {
            id: string;
            gameId: string;
            nickname: string;
            status: components["schemas"]["PlayerStatus"];
            strikes: number;
            isDisqualified: boolean;
            /** Format: date-time */
            cooldownUntil?: string | null;
            /** Format: date-time */
            joinedAt: string;
            /** Format: date-time */
            lastSeenAt: string;
        };
        BingoCard: {
            id: string;
            playerId: string;
            numbers: (number | "FREE")[][];
            cardSignature: string;
            marks: {
                [key: string]: boolean;
            };
            /** Format: date-time */
            generatedAt: string;
        };
        Draw: {
            id: string;
            gameId: string;
            sequence: number;
            /** @enum {string} */
            letter: "B" | "I" | "N" | "G" | "O";
            number: number;
            /** Format: date-time */
            drawnAt: string;
            drawnBy?: string | null;
            drawSignature?: string | null;
        };
        Claim: {
            id: string;
            gameId: string;
            playerId: string;
            pattern: components["schemas"]["BingoPattern"];
            isValid?: boolean | null;
            /** Format: date-time */
            timestamp: string;
            /** @enum {string} */
            status: "PENDING" | "ACCEPTED" | "DENIED" | "SUPERSEDED";
            /** Format: date-time */
            validatedAt?: string | null;
            validatedBy?: string | null;
            denialReason?: string | null;
            isWinner: boolean;
            winPosition?: number | null;
        };
        Penalty: {
            id: string;
            gameId: string;
            playerId: string;
            type: string;
            reason: string;
            severity: number;
            /** Format: date-time */
            appliedAt: string;
            /** Format: date-time */
            expiresAt?: string | null;
            isActive: boolean;
        };
        GameSnapshot: {
            game: components["schemas"]["Game"];
            draws: components["schemas"]["Draw"][];
            players: components["schemas"]["Player"][];
            recentClaims: components["schemas"]["Claim"][];
            winners: {
                player: components["schemas"]["Player"];
                claim: components["schemas"]["Claim"];
            }[];
        };
        CreateGameRequest: {
            name?: string;
            maxPlayers?: number;
            allowLateJoin?: boolean;
            autoDrawInterval?: number;
            winnerLimit?: number;
        };
        CreateGameResponse: components["schemas"]["Game"];
        JoinRequest: {
            pin: string;
            nickname: string;
            idempotencyKey?: string;
        };
        JoinResponse: {
            player: components["schemas"]["Player"];
            bingoCard: components["schemas"]["BingoCard"];
            sessionToken: string;
            resumeToken: string;
            gameState: components["schemas"]["GameSnapshot"];
        };
        ResumeRequest: {
            /** @description Opaque, non-JWT resume token (base64url), 32+ bytes */
            resumeToken: string;
        };
        ResumeResponse: {
            player: components["schemas"]["Player"];
            gameState: components["schemas"]["GameSnapshot"];
            missedEvents: Record<string, never>[];
            newSessionToken: string;
            drawnNumbers: {
                seq: number;
                num: number;
            }[];
            winners?: {
                playerId: string;
                nickname: string;
                rank: number;
                pattern: components["schemas"]["BingoPattern"];
            }[];
            gameStatus: components["schemas"]["GameStatus"];
        };
        AutoDrawRequest: {
            enabled: boolean;
            intervalMs?: number;
        };
        MarkRequest: {
            /** @description Cell identifier (FREE or letter+number) */
            position: string;
            marked: boolean;
            idempotencyKey?: string;
        };
        MarkResponse: {
            success: boolean;
            marks?: {
                [key: string]: boolean;
            };
            eligiblePatterns?: components["schemas"]["BingoPattern"][];
        };
        ClaimRequest: {
            pattern: components["schemas"]["BingoPattern"];
            idempotencyKey?: string;
        };
        ClaimResponse: {
            claim: components["schemas"]["Claim"];
            message?: string;
            strikes?: number;
            cooldownMs?: number;
        };
        PenaltyRequest: {
            playerId: string;
            type: string;
            reason: string;
            severity?: number;
            durationMinutes?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
